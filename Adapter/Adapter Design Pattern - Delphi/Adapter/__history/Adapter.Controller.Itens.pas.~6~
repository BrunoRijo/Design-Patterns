unit Adapter.Controller.Itens;

interface

{A Classe controller, fará o papel de adapter, fazendo com que os dados recebidos como
record sejam adaptados, ou traduzidos para o formado iModelItens}

uses
  Adapter.Model.Interfaces, System.Generics.Collections;

type
  TControllerItens = class(TInterfacedObject, IControllerItens)
  private
    FItem : IModelItens;
  public
    constructor Create(AOwner: TComponent); override;
    function Add(Value: TItem): IControllerItens;
    function Itens: TList<TItem>;
    class function New: TControllerItens;
  end;

implementation

uses
  Adapter.Model.Itens, System.SysUtils;

{ TControllerItens }

function TControllerItens.Add(Value: TItem): IControllerItens;
begin

end;

constructor TControllerItens.Create;
begin
  FItem := TModelItens.Create;
end;

function TControllerItens.Itens: TList<TItem>;
begin
  FreeAndNil(FItem);
end;

class function TControllerItens.New: TControllerItens;
begin
  Result := TControllerItens.Create;
end;

end.
